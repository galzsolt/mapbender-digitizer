Hinzugefügte Properties:

- allowSaveAll - Speicherbutton für Alle Features
- allowSave / allowSaveInResultTable: Speichern im Dialog und im Result Table
- markUnsavedFeatures - ungespeicherte Features haben speziellen Style
- deactivateControlAfterModification - Nach Veränderung von Feature wird Control deaktiviert
- revertChangedGeometryOnCancel - Wenn nach veränderter Geometrie gecancelt wird, wird die Veränderung rückgängig gemacht
- currentExtentSearch: bool, anstelle von searchType == "currentExtent"
- copy.overwriteValuesWithDefault - Beim Kopieren werden die Daten des Kopierten Features von den eingetragenen Defaultwerten überschrieben
- copy.moveCopy.x, copy.moveCopy.y - Koordinatenverschiebungen beim Kopieren
- showLabel - Zeige Featuretype.Name als Label von Geometrie an



Ideen:
- Features nach vorne setzen (z-index)
- Schema aufteilen, in Konfiguration (wird über Schema.getSchemaByFeature übergeben, ist statisch) und GUI bzw. Layer spezifische Daten (dynamisch)

Ansprechen:
- Hack beim Hintergrundbild des Color Pickers
- Die ganze Funktionalität des Features Sortieren beim Neuladen scheint überflüssig zu sein
- Updaten von ClusterStrategy im Widget findet nicht im Callback von getData statt
- Korrektes Einbinden von jsts.min.js
- Was soll passieren, wenn über Speichern Button Elemente gespeichert werden, deren mandatory Formular Elemente nicht gesetzt sind.

Refactoring - Renaming:
- Konsistente Linie für Methodennamen, hinsichtlich des _ als Präfix
- Markiere JQuery Variablen mit $ Präfix

Refactoring - Code sortieren:
- Die current Variablen in Widget currentSchema und currentPopup sind schlechter Stil und gehören weg : currentSchema durch abgespeckte Version ersetzen, die Methoden beinhaltet, da kommen die contextMenu Methoden auch rein
- Helper Klasse/Datei für Feldlose Methoden anlegen, evtl. auch mehrere
- Herausfinden, warum Openlayers.Feature 'data', 'attributes' und 'properties' hat und gegebenenfalls eins wegwerfen
- Navigation auf Buttons über JQuery einschränken
- Forbidden operations on server should NOT throw a 500
- Die Integration von vis-ui überschreibung weiter benutzen, zum abhängigen neuzeichnen von buttons
- Higlight Methoden wurden gestrichen - schauen ob was fehlt (insbesondere ResultTable anzeigen)
- Manche Funktionalitäten wie z.B. forEach Iteratoren tauchen sowohl als vanilla, als underscore und als jquery auf. Das ist schlecht.
- Für Spezialfälle (Clustering, OpenLayersCloud etc. Methoden überschreiben anstatt schalter einbauen)
- Context Menu in den Handler des Select Controls auslagern (Rechtsklick!)
- Seperation of Concerns - Inititalisierung und Anwendung trennen
- Druck reparieren


Testing:
- Testen, was mit dem Formdata passiert wenn saveFeature außerhalb des FeatureEdit Dialogs aufgerufen wird
- Überprüfen, wie im Bahn Digitizer "alles" Layer sich die einzelnen Features hinsichtlich ihrer allow Properties im Resulttable verhalten
- Popup Einstellungen in Configuration
- OpenLayersCloudPopup testen


Bugs von Robin gefunden:
    • Kopieren von Objekten: Macht die Verschiebung nach Nordosten Sinn? Eine genaue Überlappung mit dem Elternobjekt macht je nach Objekt mMn. mehr Sinn…
    • Kopieren von Objekten: Benennung der Kopie: „Copy of“ ok. Wenn die Kopie allerdings kopiert wird, evtl. besser „Copy of Copy of“ (etc.)
    • Erstellen von Objekten: Styles aus dem Stylemanager werden beim ersten Speichern nicht übernommen und stehen bei erneutem Aufruf des Managers nicht mehr im Formular.
    • Verschieben von Geometrien: Automatisches Aufrufen der Maske überflüssig, da der „Cancel“-Button impliziert, dass man die Verschiebung rückgängig machen könnte. Dies ist nicht der Fall.
    • Eingabemaske Date Picker: Möglichkeit, per Button auf heutiges Datum zu springen? (nur umständlich; yaml-Konfiguration datePicker)
    • Verändern des Koordinatensystems mit dem SRS Switcher: Alle Objekte sind in der Karte nicht mehr sichtbar
    • Beim Hovern über Buttons stehen noch die Namen der Objektklassen: „Alle verstecken, alle anzeigen, alle speichern, auf Feature zoomen, Objekt speichern, Sichtbarkeit des Objekts ändern“
    • Button „Print“: Keine ersichtliche Funktionalität
    • Bug oder Feature: Bei Style-Deaktivierung von Füllung und Rand kann das Objekt in der Karte nicht mehr angeklickt werden bzw. Informationen dazu aufgerufen werden, dies muss dann über die Sidepane-Tabelle erfolgen
    • Erstellung von Objekten: Formularknopf „Cancel“ bewirkt nicht die Löschung des erstellten Objektes. Wenn noch kein Name angegeben wurde, wird es auch nicht in der Sidepane angezeigt und bei Neuladen von MB gelöscht → besser wäre Funktionalität à la „Remove“?
    • Bei Erstellung von mehreren Objekten hintereinander (ohne klicken auf Speichern, sondern nur Eintragen von bspw. Titel in die Eingabemaske): Button „Alle Speichern“ speichert die Objekte folgerichtig, allerdings werden die vorher in die Maske(n) eingetragenen Informationen NICHT übernommen, Leertitel wird für die Objekte in der Sidepane angezeigt und gespeichert
    • Ausblenden einzelner/aller Objekte: Nach Wechsel der Digitize-Funktion und erneutem Zurückspringen auf die ursprüngliche Funktion zeigt der Sichtbarkeitsbutton „Sichtbar“ an, obwohl das Objekt in der Karte noch ausgeblendet ist.
    • Ausblenden einzelner/aller Objekte: Werden vorher alle Digitize-Objekten in ihren Kategorien ausgeblendet, so erscheinen sie in der Kategorie „all geometries“ doch wieder auf der Karte (Bug or Feature?)

Selbstgemachte Bugs:


Legacy Bugs:


Optische Bugs:
- Zellengröße limitieren in ResultTable




Gemacht:
- DataManagerUtils refactorn
- Properties in Scheme aussortieren und sortieren
- feature.attributes.geomType und schema.featureType.geomType- variablen anders benennen
- Die ganze Style Map Geschichte im AllScheme ist suboptimal. Neues Model ausdenken und anwenden.
- In All geometries verschwindet unsaved feature markierung nicht
- Kontext-Menü Funktionen irgendwie in Schema auslagern
- Es muss entschieden werden, ob die properties für das all-layer im Server oder JS definiert werden sollen
- Translations auslagern / vereinheitlichen
- Kopieren testen
- Default Style in Style Widget richtig anzeigen
- Herausfinden, wann Geometrie "selected"-Eigenschaft verliert und das korrigieren
- Feature Style Fenster öffnet nicht mit aktuellem Style des Features sondern gelb
- Individueller Feature style wird nur im all scheme gesetzt
- Verhindern, dass Features am Anfang angezeigt werden, wenn kein Digitizer geöffnet ist.
- Nach ändern des Styles wird style nicht sofort sichtbar, da feature selected ist
- Feature Style wird nicht sofort gesetzt, sondern erst später (gabs auch bei der Bahn schon)
- Neu hinzugefügtes, ungespeichertes Feature aktiviert Allsave Button nicht
- Save All Features wird nicht mehr automatisch deaktiviert
- Die Schnittstelle von .table u.s.w. vereinheitlichen
- Zu viele Buttons in Feature Edit Dialog machen Layout kaputt
- Kollision der Control- und General Buttons im Sidebar verhindern
- hasOnlyOneTheme reparieren
- Aktivierung des individuellen save Buttons im resultTable verschwindet wieder
- Backend refactorn - da gibt es viel Bedarf, seit dem Einfügen von style. Der Bahn Approch ist wohl besser
- Donut mit "Trapez"-Form als ausgeschnittes Loch gilt im Rahmen von Postgres nicht mehr als valide geometrie und wird nicht geladen, wenn By CurrentExtent gesucht wird. Ansonsten schon.
- Wiederholter klick auf control führt zu js bug
- FeatureEdit Dialog wird nach Donut und Formveränderung nicht aufgerufen
- zugriff auf visui element in initializeResultTableEvents funktioniert nicht
- Die Feature.redraw Methode mit generischem Parameter ist scheiße. Ändern
- ResultTable spezifische Methoden in resultTable extension auslagern.
- bei der StyleMap wird nicht der geomType verwendet sondern irgendwas anderes. Ändern
- Nichtvalider Donut lässt gesamtes Polygon verschwinden
- Deaktivierung von DrawDonut muss zwei mal aufgerufen werden
- Unsaved Style verschwindet, wenn Features neu geladen werden (Refactoring Style)
- Kopiertes Feature und neues Feature bekommt nach Dragging wieder default Farbe
- Default Einrichtung der Datenbank wenn parameter storage root nicht gesetzt
- options im widget constructor wieder hinzufügen
- Die Cluster Funktionalitäten in eigene Datei auslagern, die Methoden überschreibt
- nach speichern von style, style in schema feature styles einbinden
- Punktradius ist noch in der Stylemaske bei Polygonen eingebunden
- Auf die Hooks Rücksicht nehmen - am besten vorhandene Konfigurationen begutachten
- Alles in strict mode
- Evaluieren ob es sich lohnt, digitizingToolset den widget Status zu entziehen
- Alle "Evals" in seperate Funktionen auslagern, wo sie zugriff auf alle eventuell sie umgebenden Klassen haben



















Von alleine verschwunden:
- Gewählter Druck Button im ResultTable verliert Farbe wenn über die jeweilige Reihe gehovert wird
- Nach Speichern von neuem Feature ist nur noch dieses im ResultTable

